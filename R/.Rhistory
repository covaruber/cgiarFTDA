rownames(expLOD) <- rownames(data)
clust.ans <- hclust(as.dist(expLOD),method="single")
clust2 <- clust.ans
maxLOD <- max(setdiff(LODmat,Inf))
clust2$height <- ifelse(clust.ans$height>0,-log(clust.ans$height),maxLOD)
plot(clust2,cex=0.01,hang=0,ylab="LOD",xlab="",main="")
# Make LGs
LGs <- cutree(clust.ans,h=exp(-3))  #use LOD = 3 cutoff
tapply(LGs,factor(LGs),length)  #3 chroms, each with 101 markers
# assume we have a variable binomially distributed
# we take a sample 100 and 43 made rebudding
n=100
j=43
# we create the likelihood function, a function that is just the pdf for binomial
binlikelihood <- function (j,n,p){
y <- dbinom(x=j,size=n,prob=p,log=T) #log=T uses log-likelihood instead of just likelihood
return(y)
}
# we get the MLE for the parameter "p" given we observed "n" and "j"
pmax <- optimize(binlikelihood,interval=c(0,1),j=43, n=100,maximum=T)
pmax[1]  # the MLE is j/n
# let see t graphically
p1 <- seq(from=0.2, to=.8, by=0.01) # make up data, random values
L <- binlikelihood(n=100,j=43,p=p1) # calculate likelihood for the make up data
plot(p1,L) # plot the likelihoods for different values of p
abline(v=pmax[1], col="blue", lw=2) # line at MLE
rm(list=ls())
# likelihood function or pdf or density function
normlikelihood <- function (thetahat,mean1,sd1){
y <- dnorm(x=thetahat,mean=mean1,sd=sd1)
return(y)
}
# suppose the real mean is 10 in the population
# we take a sample of 10 individuals
x <- rnorm(10,10,2) # made up sample
(Xbar <- mean(x)) # we calculate the average Xbar
(sdhat <- sd(x)) # it's std deviation
pmax <- optimize(normlikelihood,interval=c(1,20),thetahat=Xbar,sd=sdhat,maximum=T)
pmax
# if we want to see te results graphically
# we use the x values, single measurements as possible means
xmup <- seq(1,20,by=0.1) # made up values to see which maximezes the L
L <- normlikelihood(thetahat=xmup,mean1=Xbar,sd1=sdhat)
plot(xmup,L)
abline(v=pmax[1], col="blue", lw=2)
rm(list=ls())
# likelihood function or pdf or density function
poissonlik <- function (x,lambda1){
y <- dpois(x,lambda=lambda1)
return(y)
}
# suppose the real mean is 10 in the population
# we take a sample of 10 individuals
x <- rpois(n=100,lambda=2) # made up values to see which maximezes the L
lambda=2
# now we want to find the MLE of miu, the mean, we will see that the MLE
# of miu is in fact Xbar
xbar <- round(mean(x))
pmax <- optimize(poissonlik,interval=c(0,6),x=xbar,maximum=T)
pmax
fx <- poissonlik(x,2)
plot(x,fx)
abline(v=pmax[1], col="blue", lw=2)
rm(list=ls())
# likelihood function or pdf or density function
explik <- function (x,rate1){
y <- dexp(x,rate=rate1)
return(y)
}
# suppose the real mean is 10 in the population
# we take a sample of 10 individuals
x <- rexp(n=100,rate=1) # made up values to see which maximezes the L
bounds = c(1e-09,1e+09)
xbar <- mean(x)
# now we want to find the MLE of lambda, the mean, we will see that the MLE
# of lambda is...
# using the mean value of x to find the MLE
pmax <- optimize(explik,interval=c(min(x),max(x)),x=xbar,maximum=T)
pmax
fx <- explik(x,1)
plot(x,fx,main="Exponential Distribution")
abline(v=pmax[1], col="blue", lw=2)
6000/.7
8571*12
(8571*12)*1.2
library(sommer)
?DT_sleepstudy
data(DT_sleepstudy)
DT <- DT_sleepstudy
head(DT)
##################################
## lme4
# fm1 <- lmer(Reaction ~ Days + (1 | Subject), data=DT)
# vc <- VarCorr(fm1); print(vc,comp=c("Variance"))
## sommer
fm2 <- mmer(Reaction ~ Days,
random= ~ Subject,
data=DT, tolparinv = 1e-6, verbose = FALSE)
summary(fm2)$varcomp
##################################
## lme4
# fm1 <- lmer(Reaction ~ Days + (1 | Subject), data=DT)
# vc <- VarCorr(fm1); print(vc,comp=c("Variance"))
## sommer
library(orthopolynom)
fm2 <- mmer(Reaction ~ Days,
random= ~ vs(us(leg(Subject))),
data=DT, tolparinv = 1e-6, verbose = FALSE)
fm2 <- mmer(Reaction ~ Days,
random= ~ vs(us(leg(Days)), Subject),
data=DT, tolparinv = 1e-6, verbose = FALSE)
fm2 <- mmer(Reaction ~ Days,
random= ~ vs(us(leg(Days)), Subject),
data=DT, tolparinv = 1e-6, verbose = TRUE)
summary(fm2)$varcomp
pp <- predict.mmer(fm2, classify = c("Days","Subject"))
source('~/Desktop/sommer/R/FUN_vsgvs.R')
fm2 <- mmer(Reaction ~ Days,
random= ~ vs(us(leg(Days)), Subject),
data=DT, tolparinv = 1e-6, verbose = TRUE)
summary(fm2)$varcomp
pp <- predict.mmer(fm2, classify = c("Days","Subject"))
head(pp$pvals)
?DT_cpdata
data(DT_cpdata)
DT <- DT_cpdata
GT <- GT_cpdata
MP <- MP_cpdata
#### create the variance-covariance matrix
A <- A.mat(GT) # additive relationship matrix
#### look at the data and fit the model
head(DT)
mix1 <- mmer(Yield~1,
random=~vs(id,Gu=A)
+ Rowf + Colf,
rcov=~units,
data=DT)
summary(mix1)$varcomp
pp <- predict(mix1,classify = "u:id")
pp <- predict(mix1,classify = "id")
head(pp$pvals)
?DT_expdesigns
data(DT_expdesigns)
DT <- DT_expdesigns
names(DT)
data1 <- DT$au1
head(data1)
## response variable: "yield"
## check indicator: "entryc" ('nc' for all unreplicated, but personal.name for checks)
## blocking factor: "block"
## treatments, personal names for replicated and non-replicated: "trt"
## check no check indicator: "new"
mix1 <- mmer(yield~entryc,
random=~block+trt,
rcov=~units,
data=data1)
summary(mix1)
pp <- predict.mmer(mix1, classify = "entryc")
head(pp$pvals)
pp <- predict.mmer(mix1, classify = "block")
head(pp$pvals)
source('~/Desktop/sommer/R/FUN_vsgvs.R')
?DT_mohring
data(DT_mohring)
DT <- DT_mohring
head(DT)
DT2 <- add.diallel.vars(DT,par1="Par1", par2="Par2")
head(DT2)
# GRIFFING MODEL 2 with reciprocal effects ###########################
mod1h <- mmer(Ftime ~ 1, data=DT2,
random = ~ Block
# GCA male & female overlayed
+ overlay(Par1, Par2)
# SCA effects (includes cross and selfs)
+ cross.id
# SCAR reciprocal effects (if zero there's no reciprocal effects)
+ cross.id:cross.type)
summary(mod1h)$varcomp
pp <- predict(mod1h, classify = "Block")
# GRIFFING MODEL 2 with reciprocal effects ###########################
mod1h <- mmer(Ftime ~ 1, data=DT2,
random = ~ Block
# GCA male & female overlayed
+ vs(overlay(Par1, Par2) )
# SCA effects (includes cross and selfs)
+ cross.id
# SCAR reciprocal effects (if zero there's no reciprocal effects)
+ cross.id:cross.type)
summary(mod1h)$varcomp
pp <- predict(mod1h, classify = "Block")
head(pp$pvals)
pp <- predict(mod1h, classify = "Par1")
head(pp$pvals)
data(DT_example)
DT <- DT_example
# DT <- droplevels(DT[which(DT$Env %in% c("CA.2011","CA.2012")),])#_example
A <- A_example
head(DT)
DT$Yield2 <- scale(DT$Yield)
ans1 <- mmer(Yield~Env,
random= ~vs(ds(Env),Name), reshape.output = T,
rcov= ~ vs(ds(Env),units), iters=19,
data=DT)
ans2 <- mmer(Yield2~Env,
random= ~vs(ds(Env),Name), reshape.output = F,
rcov= ~ vs(ds(Env),units), iters=1,
data=DT)
ans3 <- mmer(Yield2~Env,
random= ~vs(us(Env),Name),
rcov= ~ vs(ds(Env),units), iters=1, return.param = TRUE,
data=DT)
ans4 <- mmer(Yield2~Env,
random= ~vs(ds(Env),Name), reshape.output = T,
rcov= ~ vs(ds(Env),units), iters=1,
data=DT)
ans5 <- mmer(Yield~Env,
random= ~vs(ds(Env),Name), reshape.output = T,
rcov= ~ vs(ds(Env),units), iters=1,
data=DT)
ansx <- mmer(Yield~Env,
random= ~vs(ds(Env),Name),
rcov= ~ vs(ds(Env),units), iters=100,
data=DT)
library(devtools)
devtools::install_github("ropensci/nasapower",force = TRUE) # aug 2021
install.packages("devtools")
library(EnvRtype)
## Temperature for a single location:
# tepic 21.5003, -104.8619
dat1 <- get_weather(env.id = "NM", lat = 21.5003, lon = -104.8619, # lat = 19.5242, lon = -98.8122,
start.day = "2000-01-01", end.day = "2020-12-30",
variables.names = c("T2M","T2M_MAX","T2M_MIN","PRECTOT", "WS2M","RH2M","T2MDEW", "ALLSKY_SFC_LW_DWN", "ALLSKY_SFC_SW_DWN"))
?prod
prod
source('~/Desktop/sommer Extra/AI_mme5.R')
library(sommer)
data(DT_ige)
DT <- DT_ige
Af <- A_ige
An <- A_ige
DT$trait <- imputev(DT$trait)
### Direct genetic effects model
xx <- c(rep(1,4),rep(0,40))
mix1 <- mmer(trait ~ block,
random = ~ gvs(focal, neighbour, Gu=list(Af,Af)),
rcov = ~ units, iters=40,tolpar = 1e-4,
data = DT, emupdate = xx)
summary(mix1)$varcomp
z1=model.matrix(~focal-1,data=DT); colnames(z1) <- gsub("focal","",colnames(z1))
z2=model.matrix(~neighbour-1,data=DT);  colnames(z2) <- gsub("neighbour","",colnames(z2))
Z <- list(
list(z1,z2)
)
A <- list(
Af#diag(98)
)#rep(list(diag(41)),4)
A <- lapply(A, function(x){x + diag(1e-3,ncol(x),ncol(x))})
Ai <- lapply(A, function(x){solve(x)})
tt = ((unsm(2)/5) + diag(.8,2,2)) * 10000 ; #tt[lower.tri(tt)]=0;tt
# tt = diag(2)*10000
theta <- list(
tt,
diag(10000,1,1)
);theta
ttc= unsm(2);ttc[lower.tri(ttc)]=0;ttc
# ttc=diag(2)
thetaC <- list(
ttc,
diag(1,1,1)
);thetaC
X <- model.matrix(~block, data=DT)
y <- as.matrix(DT$trait)
S <- list(diag(length(y)))
## apply the function
v=rep(.41,40);v # weights for the information matrix
v2=rep(1,40)
## apply the function
v=rep(1,40);v # weights for the information matrix
v2=rep(1,40)
tt=system.time(
expr = res3<-AI_mme5(X,Z,Ai,y,S=S, nIters=8,
tolPar=1e-4,tolParInv=1e-6,
weightInfEMv = v2, weightInfMat = v,
theta=theta, thetaC=thetaC
)
)
data("DT_cpdata")
DT <- DT_cpdata
GT <- GT_cpdata
MP <- MP_cpdata
DT$Yield <- imputev(DT$Yield)
#### create the variance-covariance matrix
K <- A.mat(GT) # additive relationship matrix
K <- K + diag(1e-3,nrow(K))
#### look at the data and fit the model
head(DT)
mix1 <- mmer(Yield~1,
random=~vs(id,Gu=K)
+ Rowf,
rcov=~units,
data=DT)
summary(mix1)$varcomp
Z <- list(
list(model.matrix(~id-1, data=DT)),
list(model.matrix(~Rowf-1,data=DT))
)
A <- list(
K,
diag(13)
) #
Ai <- lapply(A, function(x){solve(x)})
theta <- list(
matrix(1000,1,1),
matrix(1000,1,1),
matrix(1000,1,1)
);theta
data("DT_example")
DT <- DT_example
K <- A_example
#### look at the data and fit the model
head(DT)
mix1 <- mmer(Yield~Env,
random= ~ vs(us(Env),Name),
rcov= ~ vs(ds(Env),units),
data=DT)
summary(mix1)$varcomp
zz <- with(DT, vs(ds(Env),Name))
Z <- list(
zz$Z # is a list already
)
A <- list( diag(41) )#rep(list(diag(41)),4)
Ai <- lapply(A, function(x){solve(x)})
tt = ((unsm(3)/5) + diag(.8,3,3)) * 10 ; tt[lower.tri(tt)]=0;tt
theta <- list(
tt,
diag(10,3,3)
);theta
ttc= unsm(3);ttc[lower.tri(ttc)]=0;ttc
thetaC <- list(
ttc,
diag(1,3,3)
);thetaC
X <- model.matrix(~Env, data=DT)
y <- as.matrix(DT$Yield)
DTx <- DT; DTx$units <- as.factor(1:nrow(DTx))
ss <- with(DTx, vs(ds(Env),units) )
S <- ss$Z #list(diag(length(y)))
## apply the function
v=rep(.7,40);v # weights for the information matrix
v2=c(seq(.9,.1,-.1),rep(0,36));v2 # weights for the EM information matrix
tt=system.time(
expr = res3<-AImme5(X,Z,Ai,y,S=S, nIters=30,
tolPar=1e-4,tolParInv=1e-6,
weightInfEMv = v2, weightInfMat = v,
theta=theta, thetaC=thetaC
)
)
source('~/Desktop/sommer Extra/AI_mme5.R')
tt=system.time(
expr = res3<-AImme5(X,Z,Ai,y,S=S, nIters=30,
tolPar=1e-4,tolParInv=1e-6,
weightInfEMv = v2, weightInfMat = v,
theta=theta, thetaC=thetaC
)
)
tt=system.time(
expr = res3<-AI_mme5(X,Z,Ai,y,S=S, nIters=30,
tolPar=1e-4,tolParInv=1e-6,
weightInfEMv = v2, weightInfMat = v,
theta=theta, thetaC=thetaC
)
)
# compare results
res3$sigmavector
summary(mix1)$varcomp
tt = ((unsm(3)/5) + diag(.8,3,3)) * 10 ;# tt[lower.tri(tt)]=0;tt
theta <- list(
tt,
diag(10,3,3)
);theta
tt=system.time(
expr = res3<-AI_mme5(X,Z,Ai,y,S=S, nIters=30,
tolPar=1e-4,tolParInv=1e-6,
weightInfEMv = v2, weightInfMat = v,
theta=theta, thetaC=thetaC
)
)
# compare results
res3$sigmavector
summary(mix1)$varcomp
?R
library(sommer)
?spl2Db
data(DT_cpdata)
DT <- DT_cpdata
GT <- GT_cpdata
MP <- MP_cpdata
A <- A.mat(GT)
Z <- with(DT, spl2Db(Row,Col))
head(Z)
head(Z$Z)
head(Z$Z,1)
Z <- with(DT, spl2Db(Row,Col, what = "base"))
head(Z$Z,1)
head(Z,1)
head(DT)
DT2 <- DT[with(DT, order(-color)), ]
Z2 <- with(DT2, spl2Db(Row,Col, what = "base"))
head(Z2,1)
head(Z,1)
DT2 <- DT[with(DT, order(-Yield)), ]
Z2 <- with(DT2, spl2Db(Row,Col, what = "base"))
head(Z2,1)
install.packages("Rcpp")
library(Rcpp)
?`Rcpp-package`
vignette("Rcpp-introduction")
library("Rcpp")
evalCpp("2 + 2")
library("Rcpp")
evalCpp("2 + 2")
library("Rcpp")
evalCpp("2 + 2")
library("Rcpp")
evalCpp("2 + 2")
library("Rcpp")
evalCpp("2 + 2")
library("Rcpp")
evalCpp("2 + 2")
install.packages("~/Downloads/asreml-4.1.0.176-macOS-10.13.2-R4.2.tar", repos = NULL)
install.packages("~/Downloads/asreml-4.1.0.176-macOS-10.13.2-R4.2.tar", repos = NULL, type="source")
install.packages("~/Downloads/asreml-4.1.0.182-macOS-arm64-12.6-R4.2.tar", repos = NULL)
install.packages("~/Downloads/asreml-4.1.0.182-macOS-arm64-12.6-R4.2.tar", repos = NULL, type="source")
library(asreml)
install.packages("~/Downloads/asreml-4.1.0.182-macOS-arm64-12.6-R4.2.tar", repos = NULL, type="source")
library(asreml)
library(asreml)
dyn.load('/opt/R/arm64/lib/libgfortran.5.dylib')
?dyn.load
library(asreml)
asreml::asreml.license.activate()
?asreml
asreml.license.activate()
asreml.license.activate()
install.packages("data.table")
install.packages("ggplot2")
install.packages("jsonlite")
library(asreml)
?asreml
data(oats)
oats.asr <- asreml(yield ~ Variety*Nitrogen, random = ~ Blocks/Wplots, data=oats)
100000/12
(100000/12)*19.3
((100000/12)*19.3)*.25
rsconnect::setAccountInfo(name='giovanny-covarrubias', token='DB3778031938A406DDB9EA47006FB47D', secret='OYKpvd/zQUgIXhlzhMau9nJ/OhYeR3oiv0odKDCD')
library(rsconnect)
rsconnect::deployApp('~/Desktop/banal')
rsconnect::setAccountInfo(name='giovanny-covarrubias', token='DB3778031938A406DDB9EA47006FB47D', secret='OYKpvd/zQUgIXhlzhMau9nJ/OhYeR3oiv0odKDCD')
library(rsconnect)
rsconnect::deployApp('~/Desktop/banal')
rsconnect::setAccountInfo(name='giovanny-covarrubias', token='DB3778031938A406DDB9EA47006FB47D', secret='OYKpvd/zQUgIXhlzhMau9nJ/OhYeR3oiv0odKDCD')
library(rsconnect)
rsconnect::deployApp('~/Desktop/banal')
rsconnect::deployApp('~/Desktop/banal2')
rsconnect::setAccountInfo(name='giovanny-covarrubias', token='DB3778031938A406DDB9EA47006FB47D', secret='OYKpvd/zQUgIXhlzhMau9nJ/OhYeR3oiv0odKDCD')
rsconnect::deployApp('~/Desktop/banal2')
library(rsconnect)
library(rsconnect)
rsconnect::deployApp('~/Desktop/banal')
install.packages("~/Desktop/cgiarBase_1.0.1.tar.gz", repos = NULL, type = "source")
rsconnect::deployApp('~/Desktop/banal')
rsconnect::deployApp('~/Desktop/banal')
library(rsconnect)
rsconnect::deployApp('~/Desktop/banal')
options('repos')
?options
rsconnect::deployApp('~/Desktop/banal')
options('repos')
option(repos = list(CRAN = "https://cloud.r-project.org", myrepo = "https://github.com"))
options(repos = list(CRAN = "https://cloud.r-project.org", myrepo = "https://github.com"))
options('repos')
options('repos')
options(repos = list(CRAN = "https://cloud.r-project.org", myrepo = "https://github.com"))
library(rsconnect)
rsconnect::deployApp('~/Desktop/banal')
options(repos = list(CRAN = "https://cloud.r-project.org", myrepo = "https://github.com/covaruber"))
options('repos')
rsconnect::setAccountInfo(name='giovanny-covarrubias', token='DB3778031938A406DDB9EA47006FB47D', secret='OYKpvd/zQUgIXhlzhMau9nJ/OhYeR3oiv0odKDCD')
library(rsconnect)
rsconnect::deployApp('~/Desktop/banal')
rsconnect::appDependencies()
library(rsconnect)
rsconnect::deployApp('~/Desktop/banal')
library(rsconnect)
rsconnect::deployApp('~/Desktop/banal')
rsconnect::deployApp('~/Desktop/banal')
install.packages("~/Desktop/cgiarBase_1.0.1.tar.gz", repos = NULL, type = "source")
rsconnect::setAccountInfo(name='giovanny-covarrubias', token='DB3778031938A406DDB9EA47006FB47D', secret='OYKpvd/zQUgIXhlzhMau9nJ/OhYeR3oiv0odKDCD')
library(rsconnect)
rsconnect::deployApp('~/Desktop/banal')
rsconnect::deployApp('~/Desktop/banal')
rsconnect::deployApp('~/Desktop/banal')
options(repos = list(CRAN = "https://cloud.r-project.org", myrepo = "https://github.com/covaruber"))
rsconnect::setAccountInfo(name='giovanny-covarrubias', token='DB3778031938A406DDB9EA47006FB47D', secret='OYKpvd/zQUgIXhlzhMau9nJ/OhYeR3oiv0odKDCD')
library(rsconnect)
rsconnect::deployApp('~/Desktop/banal')
rsconnect::deployApp('~/Desktop/banal')
rsconnect::setAccountInfo(name='giovanny-covarrubias', token='DB3778031938A406DDB9EA47006FB47D', secret='OYKpvd/zQUgIXhlzhMau9nJ/OhYeR3oiv0odKDCD')
library(rsconnect)
rsconnect::deployApp('~/Desktop/banal')
setwd("~/Desktop/cgiarFTDA/R")
setwd("~/Desktop/cgiarFTDA/R")
